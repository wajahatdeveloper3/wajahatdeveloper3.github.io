<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>3D Rotating Table</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
    }
    canvas {
      display: block;
    }
  </style>
</head>
<body>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script>
    // Scene setup
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    // Table creation
    const material = new THREE.MeshStandardMaterial({ color: 0x8B4513 }); // Brown material
    const topMaterial = new THREE.MeshStandardMaterial({ color: 0xA0522D }); // Darker brown for table top

    // Table top
    const tableTopGeometry = new THREE.BoxGeometry(5, 0.2, 3);
    const tableTop = new THREE.Mesh(tableTopGeometry, topMaterial);
    tableTop.position.y = 2;
    scene.add(tableTop);

    // Table legs
    const legGeometry = new THREE.BoxGeometry(0.2, 2, 0.2);
    const leg1 = new THREE.Mesh(legGeometry, material);
    const leg2 = new THREE.Mesh(legGeometry, material);
    const leg3 = new THREE.Mesh(legGeometry, material);
    const leg4 = new THREE.Mesh(legGeometry, material);

    leg1.position.set(-2.3, 1, -1.3);
    leg2.position.set(2.3, 1, -1.3);
    leg3.position.set(-2.3, 1, 1.3);
    leg4.position.set(2.3, 1, 1.3);

    scene.add(leg1, leg2, leg3, leg4);

    // Lighting
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.7);
    scene.add(ambientLight);

    const pointLight = new THREE.PointLight(0xffffff, 0.8);
    pointLight.position.set(10, 10, 10);
    scene.add(pointLight);

    // Camera position
    camera.position.z = 10;

    // Rotation controls
    let isDragging = false;
    let previousMousePosition = { x: 0, y: 0 };

    document.addEventListener('mousedown', () => {
      isDragging = true;
    });

    document.addEventListener('mouseup', () => {
      isDragging = false;
    });

    document.addEventListener('mousemove', (event) => {
      if (isDragging) {
        const deltaMove = {
          x: event.offsetX - previousMousePosition.x,
          y: event.offsetY - previousMousePosition.y
        };

        tableTop.rotation.y += deltaMove.x * 0.01;
        tableTop.rotation.x += deltaMove.y * 0.01;

        leg1.rotation.y += deltaMove.x * 0.01;
        leg2.rotation.y += deltaMove.x * 0.01;
        leg3.rotation.y += deltaMove.x * 0.01;
        leg4.rotation.y += deltaMove.x * 0.01;

        previousMousePosition = { x: event.offsetX, y: event.offsetY };
      }
    });

    document.addEventListener('mousemove', (event) => {
      previousMousePosition = { x: event.offsetX, y: event.offsetY };
    });

    // Animate
    const animate = function () {
      requestAnimationFrame(animate);
      renderer.render(scene, camera);
    };

    animate();
  </script>
</body>
</html>
